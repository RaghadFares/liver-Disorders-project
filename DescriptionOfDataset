


##Aisha workspace

General information about the dataset


-The source of the dataSet: https://www.kaggle.com/datasets/fatemehmehrparvar/liver-disorders


-The goal of collecting this dataset
The aim of creating this dataset is to study the differences between US patients and Indian patients with liver disease.
Therefore, there are differences based on gender in predicting liver disease,
as previous studies found the number of people infected with this disease,
its prevalence rate, and many statistical details.


- Number of attributes: 11


- Attribute types:
          Data Types
Age            int64
Gender        object
TB           float64
DB           float64
Alkphos        int64
Sgpt           int64
Sgot           int64
TP           float64
ALB          float64
A/G Ratio    float64
Selector       int64


- Number of objects: 583


- label: Selector



_____
## Attribute's Description table
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|   Attribute Name   |                       Description                           |   Data Type   |                  Possible values                          |
+====================+=============================================================+===============+===========================================================+
| Age                |   Represents the age of the patients.                       | Numeric       |  4 to 90                                                  |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| Gender             |   Represents the gender of the patients.                    | Categotical   |  "Male" or "Female"                                       |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   It is an indicator of the total amount of bilirubin in    |               |                                                           |
| TB                 |   the blood. Bilirubin is a yellow pigment produced by the  | Numeric       |  continuous numrical values(different possible)           |
|                    |   breakdown of old red blood cells. It is associated with   |               |                                                           |
|                    |   the liver.                                                |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Direct Bilirubin.                               |               |                                                           |
| DB                 |   Direct Bilirubin (DB) refers specifically to the          | Numeric       |  continuous numrical values(different possible)           |
|                    |   conjugated bilirubin, which is the form of bilirubin that |               |                                                           |
|                    |   is directly excreted by the liver into bile.              |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| Alkphos            |   refers to Alkaline Phosphatase. Alkaline phosphatase is   | Numeric       |  continuous numrical values(different possible)           |
|                    |   an enzyme found primarily in the liver and bones.         |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Serum Glutamic Pyruvic Transaminase, also known |               |                                                           |
| Sgpt               |   as Alanine Aminotransferase (ALT). SGPT is an enzyme      | Numeric       |  continuous numrical values(different possible)           |
|                    |   found primarily in the liver.                             |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Serum Glutamic Oxaloacetic Transaminase, also   |               |                                                           |
| Sgot               |   known as Aspartate Aminotransferase (AST). SGOT is an     | Numeric       |  continuous numrical values(different possible)           |
|                    |   enzyme found primarily in the liver, heart, and muscles.  |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   It measures the total protein level in the blood, which   |               |  continuous numrical values(different possible)           |
|  TP                |   primarily consists of albumin and globulins.It is         | Numeric       |                                                           |
|                    |   associated with the                                       |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| ALB                |   represents Albumin levels in the blood.                   | Numeric       |  continuous numrical values(different possible)           |
|                    |   Albumin is a protein produced by the liver.               |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   measures the ratio between albumin and globulins in the   |               |                                                           |
|                    |   blood. Albumin is a type of protein primarily produced    |               |                                                           |
| A/G Ratio          |   in the liver and plays a crucial role in maintaining blood| Numeric       |  continuous numrical values(different possible)           |
|                    |   pressure and transporting nutrients.                      |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| Selector           |   is a class label indicating whether a patient has liver   | Binary        |  continuous numrical values(different possible)           |
|                    |   disease or not.                                           |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+

### phase(2)

## sample of 20 employees from the dataset:
using sample() function

'''{python}
import pandas as pd
df = pd.read_csv('Indian Liver Patient Dataset (ILPD).csv');
sample=df.sample(n=20);
print(sample);
'''
______
## Show the missing value:
We have 4 missing values in a column "A/G Ratio"

'''{python}
missing_values = df.isna()

missing_counts = missing_values.sum();

rows_with_missing = df[df.isna().any(axis=1)];

print("Missing values in each column:");
print(missing_counts);
print("\nRows with missing values:");
print(rows_with_missing);
'''
______
## Show the Min., 1st Qu., Median, Mean ,3rd Qu.,Max. for each numeric column:
using summary_stats() function

'''{python}
summary_stats=df.describe();
print(summary_stats);
'''
From these summary statistics, several key observations can be made:

#Age:
- There is significant variability in ages, ranging from 4 to 90 years, with an average of 44.74 years. This indicates that liver disease can affect individuals across a wide age range.
#Total Bilirubin (TB):
- The values vary significantly, with a maximum of 75 and a minimum of 0.4. The mean is 3.3, while the median is 1. This suggests the presence of extreme values or some deviation in TB levels.
#Direct Bilirubin (DB):
- DB values range from 0.1 to 19.7, with a mean of 1.49, indicating significant variation in direct bilirubin levels.
#Alkaline Phosphatase (Alkphos):
- Alkphos values range from 63 to 2110, with a mean of 290.58, indicating the presence of extreme values and significant variation in alkaline phosphatase levels.
#Serum Glutamic-Pyruvic Transaminase (Sgpt):
- Sgpt values range from 10 to 2000, with a mean of 80.71, indicating significant variation in Sgpt levels.
#Serum Glutamic-Oxaloacetic Transaminase (Sgot):
- Sgot values range from 10 to 4929, with a mean of 109.91, indicating significant variation in Sgot levels.
#Total Protein (TP):
- TP values range from 2.7 to 9.6, with a mean of 6.48, suggesting convergence of data and no significant variation in total protein levels.
#Albumin (ALB):
- ALB values range from 0.3 to 2.8, with a mean of 0.947, indicating convergence of data and no significant variation in albumin levels.
#Albumin/Globulin Ratio (A/G Ratio):
- The A/G Ratio ranges from 1 to 2, with a mean of 1.29, indicating convergence of data and no significant variation in the albumin/globulin ratio.
#Selector:
- The values are binary, limited to 1 and 2, indicating binary classification labels.
______
##Show the Variance

'''{python}
variance= df.var(numeric_only=True);
print(variance);
'''

Variance helps understand the extent of dispersion or scatter of values in each column. As the variance increases,
it indicates that the values are more spread out and scattered away from the mean, whereas decreasing variance suggests that the values are less scattered and closer to the mean value.
Therefore, our variance results indicate:
#Age:
The variance is high, so the level of dispersion and spread of values is high.

#TB, DB, Alkphos, Sgpt, Sgot:
The variance is very high in these columns, so the level of dispersion and spread of values is very high.

#TP, ALB, A/G Ratio, Selector:
The variance is moderate to low in these columns, so the level of dispersion and spread of values is moderate to low.
______
## Understanding the data through graph representations:
'''{python}
import matplotlib.pyplot as plt
import pandas as pd
df = pd.read_csv('Dis.csv');
gender_diagnosis_counts = df[df['Selector'] == 1]['Gender'].value_counts();
plt.figure(figsize=(8, 8));
plt.pie(gender_diagnosis_counts, labels=gender_diagnosis_counts.index, autopct='%1.1f%%', startangle=140, colors=['lightblue','pink']);
plt.title('The relationship between gender and liver disease');
plt.axis('equal');
plt.show();
'''
People affected by liver disease were selected from the 'Selector' attribute for both genders of the 'Gander' attribute for comparison between the ratio of affected women and men. 
As a result, it has been found that men are significantly more susceptible to liver disease than women.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.scatter(df[df['Selector'] == 1]['TB'], df[df['Selector'] == 1]['Selector'], color='red', label='Liver Disease')
plt.scatter(df[df['Selector'] == 2]['TB'], df[df['Selector'] == 2]['Selector'], color='blue', label='No Liver Disease')
plt.xlabel('Total Bilirubin (TB)')
plt.ylabel('Liver Disease (1=Diseased, 2=Non-Diseased)')
plt.title('Relationship between Total Bilirubin (TB) and Liver Disease Diagnosis')
plt.legend()
plt.grid(True)
plt.ylim(0.9, 2.1)
plt.show()
'''
The chart(Scatter) above indicates a relationship between liver disease diagnosis and elevated levels of Total Bilirubin in the blood, as patients with liver disease
have higher levels of Total Bilirubin in the blood compared to non-diseased individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.scatter(df[df['Selector'] == 1]['DB'], df[df['Selector'] == 1]['Selector'], color='red', label='Liver Disease')
plt.scatter(df[df['Selector'] == 2]['DB'], df[df['Selector'] == 2]['Selector'], color='blue', label='No Liver Disease')
plt.xlabel('Direct Billirubin(DB)')
plt.ylabel('Liver Disease (1=Diseased, 2=Non-Diseased)')
plt.title('Relationship between Direct Billirubin (DB) and Liver Disease Diagnosis')
plt.legend()
plt.grid(True)
plt.ylim(0.9, 2.1)
plt.show()
'''
the chart(Scatter) shows a relationship between DB(Direct Bilirubin) and liver disease diagnosis, as patients with liver disease have higher levels 
of DB ‏(Direct Bilirubin) compared to those without liver disease.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['Alkphos'], df[df['Selector'] == 2]['Alkphos']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Alkphos')
plt.title('Relationship between Alkphos and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) illustrates a direct relationship between Alkphos and liver disease, as patients with liver disease have higher levels of Alkphos 
compared to non-diseased individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['Alkphos'], df[df['Selector'] == 2]['Alkphos']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Alkphos')
plt.title('Relationship between Alkphos and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) illustrates a direct relationship between Alkphos and liver disease, as patients with liver disease have higher levels of Alkphos 
compared to non-diseased individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['Sgpt'], df[df['Selector'] == 2]['Sgpt']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Sgpt')
plt.title('Relationship between Sgpt and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) clearly shows a relationship between liver disease and SGPT(Serum Glutamate Pyruvate Transaminase) as patients with liver disease 
have higher levels of this enzyme compared to non-affected individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
mean_sgot_by_selector = df.groupby('Selector')['Sgot'].mean()
plt.plot(mean_sgot_by_selector.index, mean_sgot_by_selector.values, marker='o', linestyle='-')
plt.xlabel('Liver Disease Diagnosis (1=Diseased, 2=Non-Diseased)')
plt.ylabel('Mean SGOT Level')
plt.title('Relationship between SGOT and Liver Disease Diagnosis')
plt.grid(True)
plt.xticks([1, 2], ['Diseased', 'Non-Diseased'])
plt.show()
'''
The chart(line Graph) clearly shows a relationship between SGOT(Serum Glutamate Oxaloacetic Transaminase) and liver disease, as patients with liver disease have higher levels of SGOT compared 
to non-affected individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['TP'], df[df['Selector'] == 2]['TP']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Total Proteins')
plt.title('Relationship between Total Proteins and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) reveals a relationship between TP(Total Proteins) and liver disease, despite the weak correlation. Non-affected individuals also have TP levels, 
but those affected have slightly higher levels.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['ALB'], df[df['Selector'] == 2]['ALB']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Albumin')
plt.title('Relationship between Albumin and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
From the chart(BoxPlot), it is evident that there is a negative correlation between ALB(Albumin) and non-affected individuals with liver disease, 
as an increase in ALB indicates liver health. Individuals with liver disease have lower levels of ALB.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['A/G Ratio'].dropna(), df[df['Selector'] == 2]['A/G Ratio'].dropna()], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('A/G Ratio')
plt.title('Relationship between A/G Ratio and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The (boxplot) shows a decrease in the A/G ratio among individuals with liver disease compared to those without. This indicates that 
the decrease in the A/G ratio may be an indicator of changes in liver function and a marker for the occurrence of liver disease.
________________________
##Data Preprocessing:


__

## Handling duplicates\
#First, we calculate the number of duplicates, and then we start handle them

'''{python}
import pandas as pd
df = pd.read_csv('Indian Liver Patient Dataset (ILPD).csv')
num_duplicates = df.duplicated().sum()
df_cleaned = df.drop_duplicates()
print("Number of duplicate rows:", num_duplicates)
print("DataFrame after dropping all duplicate rows:")
print(df_cleaned)
df_cleaned.to_csv('cleaned_dataset.csv', index=False)

# this shows that our dataset has 13 duplicates, and all of them were dealt with by removing them. 
__

## Handling Missing Values\ 
#First, we calculate the number of missing values in our dataset:

'''{python}
import pandas as pd
df = pd.read_csv('cleaned_dataset.csv');
sample=df.sample(n=20);
print(sample);
missing_values = df.isna()
missing_counts = missing_values.sum();
rows_with_missing = df[df.isna().any(axis=1)];

print("Missing values in each column:");
print(missing_counts);
print("\nRows with missing values:");
print(rows_with_missing);

#this shows that our dataset has 4 missing values and all of them in A/G Ratio column.

#Secondly, we handle these missing values by calculating the mean value for the target column which is A/G column, 
and then we replace the missing values with the resulting mean.

'''{python}

import pandas as pd
df = pd.read_csv('cleaned_dataset.csv')
mean_value = df['A/G Ratio'].mean()
df['A/G Ratio'].fillna(value=mean_value, inplace=True)

missing_values = df.isnull().sum()
print('Missing values per column:')
print(missing_values)
df.to_csv('cleaned_dataset.csv', index=False)

# and Here, the output shows that we handled all the missing values.


   __

## handling outliers \

# Before we handle our outliers we did choose the IQR method Based on our dataset to identify how many outliers in our dataset.

'''{python}
import pandas as pd
import numpy as np

data = pd.read_csv('cleaned_dataset.csv')
outlier_threshold = 1.5

def count_outliers(column_data):
    q1 = np.percentile(column_data, 25)
    q3 = np.percentile(column_data, 75)
    iqr = q3 - q1
    upper_bound = q3 + outlier_threshold * iqr
    lower_bound = q1 - outlier_threshold * iqr
    outliers = (column_data > upper_bound) | (column_data < lower_bound)
    return sum(outliers)

numeric_columns = data.select_dtypes(include=[np.number]).columns

outlier_counts = {}
total_rows_with_outliers = 0

for column in numeric_columns:
    outliers = count_outliers(data[column])
    outlier_counts[column] = outliers
    total_rows_with_outliers += outliers

total_rows = len(data)

print("Outlier Counts:")
for column, count in outlier_counts.items():
    print(f"{column}: {count} rows with outliers")

print(f"Total Rows with Outliers: {total_rows_with_outliers}")


# The analysis of our dataset revealed that a significant number of outliers, specifically 388 rows, exist out of the total 570 rows. 
This high proportion of outliers indicates the presence of extreme values that deviate significantly from the majority of the data.
To address this issue, we made the decision to adopt a strategy of capping the outliers. Rather than removing these data points entirely,
we opted to replace them with the nearest non-outlier values. 
This approach allows us to retain the entirety of our dataset while mitigating the impact of these extreme values on our subsequent analyses.
By capping the outliers and maintaining the remaining data, 
we aim to preserve the integrity of the dataset and avoid the potential loss of valuable information that would occur through outright removal of the outliers.
This ensures that our analysis incorporates as much relevant information as possible, while still accounting for the presence of extreme observations

--- 
# handling outliers 

'''{python}
import pandas as pd
import numpy as np

data = pd.read_csv('cleaned_dataset.csv')
outlier_threshold = 1.5

def count_outliers(column_data):
    q1 = np.percentile(column_data, 25)
    q3 = np.percentile(column_data, 75)
    iqr = q3 - q1
    upper_bound = q3 + outlier_threshold * iqr
    lower_bound = q1 - outlier_threshold * iqr
    outliers = (column_data > upper_bound) | (column_data < lower_bound)
    return sum(outliers)

numeric_columns = data.select_dtypes(include=[np.number]).columns

outlier_counts = {}
total_rows = len(data)

for column in numeric_columns:
    outliers = count_outliers(data[column])
    outlier_counts[column] = outliers

    # Cap outliers by setting them to the nearest non-outlier value
    q1 = np.percentile(data[column], 25)
    q3 = np.percentile(data[column], 75)
    iqr = q3 - q1
    upper_bound = q3 + outlier_threshold * iqr
    lower_bound = q1 - outlier_threshold * iqr
    data[column] = np.clip(data[column], lower_bound, upper_bound)

data.to_csv('cleaned_dataset.csv', index=False)
    
    

# Checking the results by counting outliers after handling them.

import pandas as pd
import numpy as np

data = pd.read_csv('cleaned_dataset.csv')
outlier_threshold = 1.5

def count_outliers(column_data):
    q1 = np.percentile(column_data, 25)
    q3 = np.percentile(column_data, 75)
    iqr = q3 - q1
    upper_bound = q3 + outlier_threshold * iqr
    lower_bound = q1 - outlier_threshold * iqr
    outliers = (column_data > upper_bound) | (column_data < lower_bound)
    return sum(outliers)

numeric_columns = data.select_dtypes(include=[np.number]).columns

outlier_counts = {}
total_rows_with_outliers = 0

for column in numeric_columns:
    outliers = count_outliers(data[column])
    outlier_counts[column] = outliers
    total_rows_with_outliers += outliers

total_rows = len(data)

print("Outlier Counts:")
for column, count in outlier_counts.items():
    print(f"{column}: {count} rows with outliers")

print(f"Total Rows with Outliers: {total_rows_with_outliers}")




------------------------------


# Data Transmation 
 __

# encoding\
'''{python}

from sklearn.preprocessing import LabelEncoder
import pandas as pd
from scipy import stats

df = pd.read_csv('cleaned_dataset.csv')
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])
print(df)
df.to_csv('cleaned_dataset.csv', index=False) 

#Here in the encoding  method, we represent the gender with values 0 and 1, which mean as follows (male =1 ) and (female = 0)

 __
# Normaliztion \
'''{python}
import pandas as pd

data = pd.read_csv('cleaned_dataset.csv')
df = pd.DataFrame(data)


columns_to_normalize = ['TP', 'DB', 'Alkphos', 'Sgpt', 'Sgot', 'TP', 'ALB', 'A/G Ratio']


for column in columns_to_normalize:
    max_abs_value = df[column].abs().max()
    df[column] = df[column] / (10 ** len(str(int(max_abs_value))))

print("DataFrame after Decimal Scaling Normalization:")
print(df)
df.to_csv('cleaned_dataset.csv', index=False)


#Here in Normaliztion method, we normalize the attributes and unify their scale since the range for each attribute is quite different ,
This method helps us to format all the values in dataset and facilitates the analysis process. 

___
# Aggregation  \
'''{python}
import pandas as pd

# Read CSV file
df = pd.read_csv('cleaned_dataset.csv')
df = df.drop('Age', axis=1)
df.groupby('Gender').agg('max')
df.groupby(['Gender', 'Selector']).agg('mean')

#here in Aggregation method, we grouped the "Gender" and "Selector" columns and an aggregation function (in this case, "mean")
And it was applied in the data. This will give us the mean value for each attribute for both male and female patients who are either selected (1) or not selected (2).
we ignored age attribute Because it has nothing to do with contracting the disease.

__
#discretization \
'''{python}
import pandas as pd

df = pd.read_csv("cleaned_dataset.csv")


median_age = df["Age"].median()
df["Age"].fillna(median_age, inplace=True)


age_labels = ["Children", "Adults", "Seniors"]
df["Age"] = pd.qcut(df["Age"], q=3, labels=age_labels)

print(df)
df.to_csv('after_transformation.csv', index=False)

#Here in discretization method, we convert numbers to Ranking of age groups attribute to :
0-17 years:Children
18-64 years: Adults
65+ years: Seniors
we used this simplification to makes the data easier to interpret and analyze.
 __
# Selection feature  \

# Correlation Coefficient and Chi squared  \
'''{python}
import pandas as pd
from scipy.stats import chi2_contingency

df = pd.read_csv("after_transformation.csv")

# Correlation calculations
cor_gender = df['Gender'].corr(df['Selector'])
cor_TB = df['TB'].corr(df['Selector'])
cor_DB = df['DB'].corr(df['Selector'])
cor_Alkphos = df['Alkphos'].corr(df['Selector'])
cor_Sgpt = df['Sgpt'].corr(df['Selector'])
cor_sgot = df['Sgot'].corr(df['Selector'])
cor_TP = df['TP'].corr(df['Selector'])
cor_ALB = df['ALB'].corr(df['Selector'])
cor_A_G_Ratio = df['A/G Ratio'].corr(df['Selector'])

print("Correlation coefficients:")
print("Gender:", cor_gender)
print("TB:", cor_TB)
print("DB:", cor_DB)
print("Alkphos:", cor_Alkphos)
print("Sgpt:", cor_Sgpt)
print("Sgot:", cor_sgot)
print("TP:", cor_TP)
print("ALB:", cor_ALB)
print("A/G Ratio:", cor_A_G_Ratio)

chi2, p, dof, expected = chi2_contingency(pd.crosstab(df['Age'], df['Selector']))

print("\nChi-squared test result:")
print("Chi-square statistic:", chi2)
print("P-value:", p)
print("Degrees of freedom:", dof)

#Here in this code, we used the correlation coefficients between each numeric attributes and the 'Selector' ,
we use it to measures the strength and direction of the linear relationship between two variables .
And for "Age" attribute we chi-squared this test is used to determine if there is a statistically significant relationship between categorical attributes.
 __

# Drop uncorrelation attributes  \
'''{python}
import pandas as pd
df = pd.read_csv("after_transformation.csv")
df = df.drop(['Age'], axis=1)

# Save the updated dataset
df.to_csv("after_transformation.csv", index=False)


# As we see the results in Correlation coefficients and Chi-squared there is no attributs with 0.75 or higher.
except "Age" so we will remove it from our DtataSet.

 __

















