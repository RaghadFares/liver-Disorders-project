


##Aisha workspace

General information about the dataset


-The source of the dataSet: https://www.kaggle.com/datasets/fatemehmehrparvar/liver-disorders


-The goal of collecting this dataset
The aim of creating this dataset is to study the differences between US patients and Indian patients with liver disease.
Therefore, there are differences based on gender in predicting liver disease,
as previous studies found the number of people infected with this disease,
its prevalence rate, and many statistical details.


- Number of attributes: 11


- Attribute types:
          Data Types
Age            int64
Gender        object
TB           float64
DB           float64
Alkphos        int64
Sgpt           int64
Sgot           int64
TP           float64
ALB          float64
A/G Ratio    float64
Selector       int64


- Number of objects: 583


- label: Selector



_____
## Attribute's Description table
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|   Attribute Name   |                       Description                           |   Data Type   |                  Possible values                          |
+====================+=============================================================+===============+===========================================================+
| Age                |   Represents the age of the patients.                       | Numeric       |  4 to 90                                                  |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| Gender             |   Represents the gender of the patients.                    | Categotical   |  "Male" or "Female"                                       |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Total Bilirubin.                                |               |                                                           |
| TB                 |   Bilirubin is a yellowish substance found in bile,         | Numeric       |  continuous numrical values(different possible)           |
|                    |   Total Bilirubin (TB) refers to the total amount of        |               |                                                           |
|                    |   bilirubin in the blood.                                   |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Direct Bilirubin.                               |               |                                                           |
| DB                 |   Direct Bilirubin (DB) refers specifically to the          | Numeric       |  continuous numrical values(different possible)           |
|                    |   conjugated bilirubin, which is the form of bilirubin that |               |                                                           |
|                    |   is directly excreted by the liver into bile.              |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| Alkphos            |   refers to Alkaline Phosphatase. Alkaline phosphatase is   | Numeric       |  continuous numrical values(different possible)           |
|                    |   an enzyme found primarily in the liver and bones.         |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Serum Glutamic Pyruvic Transaminase, also known |               |                                                           |
| Sgpt               |   as Alanine Aminotransferase (ALT). SGPT is an enzyme      | Numeric       |  continuous numrical values(different possible)           |
|                    |   found primarily in the liver.                             |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |   refers to Serum Glutamic Oxaloacetic Transaminase, also   |               |                                                           |
| Sgot               |   known as Aspartate Aminotransferase (AST). SGOT is an     | Numeric       |  continuous numrical values(different possible)           |
|                    |   enzyme found primarily in the liver, heart, and muscles.  |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| TP                 |   refers to Total Proteins.                                 | Numeric       |  continuous numrical values(different possible)           |
|                    |   It represents the total protein levels in the blood.      |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| ALB                |   represents Albumin levels in the blood.                   | Numeric       |  continuous numrical values(different possible)           |
|                    |   Albumin is a protein produced by the liver.               |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
|                    |  refers to the Albumin/Globulin ratio.                      |               |                                                           |
|                    |  It is a calculated value obtained by dividing the albumin  |               |                                                           |
| A/G Ratio          |  levels by the globulin levels in the blood.                | Numeric       |  continuous numrical values(different possible)           |
|                    |  This ratio provides information about the balance between  |               |                                                           |
|                    |  albumin and globulin proteins in the blood.                |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+
| Selector           |   is a class label indicating whether a patient has liver   | Binary        |  continuous numrical values(different possible)           |
|                    |   disease or not.                                           |               |                                                           |
+--------------------+-------------------------------------------------------------+---------------+-----------------------------------------------------------+

### phase(2)

## sample of 20 employees from the dataset:
using sample() function

'''{python}
import pandas as pd
df = pd.read_csv('Indian Liver Patient Dataset (ILPD)');
sample=df.sample(n=20);
print(sample);
'''
______
## Show the missing value:
We have 4 missing values in a column "A/G Ratio"

'''{python}
# Count missing values in each column
missing_counts = missing_values.sum();

# Extract rows with missing values
rows_with_missing = df[df.isna().any(axis=1)];

# Print the results
print("Missing counts in each column:");
print(missing_counts);
print("Rows with missing values:");
print(rows_with_missing);
'''
______
## Show the Min., 1st Qu., Median, Mean ,3rd Qu.,Max. for each numeric column:
using summary_stats() function

'''{python}
summary_stats=df.describe();
print(summary_stats);
'''
______
##Show the Variance
Variance helps understand the extent of dispersion or scatter of values in each column. As the variance increases, it indicates that the values are more spread out
and scattered away from the mean, whereas decreasing variance suggests that the values are less scattered and closer to the mean value.
Therefore, our Variance results indicate:
 #Age:
   Due to the high variance, the level of dispersion and spread of values is high.

#TB, DB, Alkphos, Sgpt, Sgot (Liver Enzymes):
   With high variance in these columns, the level of dispersion and spread of values is very high.

#TP, ALB, A/G Ratio, Selector:
   With moderate to low variance in these columns, the level of dispersion and spread of values is moderate to low.
______
## Understanding the data through graph representations:
'''{python}
import matplotlib.pyplot as plt
gender_diagnosis_counts = df[df['Selector'] == 1]['Gender'].value_counts();
plt.figure(figsize=(8, 8));
plt.pie(gender_diagnosis_counts, labels=gender_diagnosis_counts.index, autopct='%1.1f%%', startangle=140, colors=['lightblue','pink']);
plt.title('The relationship between gender and liver disease');
plt.axis('equal');
plt.show();
'''
People affected by liver disease were selected from the 'Selector' attribute for both genders of the 'Gander' attribute for comparison between the ratio of affected women and men. 
As a result, it was concluded that men are much more susceptible to liver disease than women by a significant margin.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.scatter(df[df['Selector'] == 1]['TB'], df[df['Selector'] == 1]['Selector'], color='red', label='Liver Disease')
plt.scatter(df[df['Selector'] == 2]['TB'], df[df['Selector'] == 2]['Selector'], color='blue', label='No Liver Disease')
plt.xlabel('Total Bilirubin (TB)')
plt.ylabel('Liver Disease (1=Diseased, 2=Non-Diseased)')
plt.title('Relationship between Total Bilirubin (TB) and Liver Disease Diagnosis')
plt.legend()
plt.grid(True)
plt.ylim(0.9, 2.1)
plt.show()
'''
The chart(Scatter) above indicates a relationship between liver disease diagnosis and elevated levels of Total Bilirubin in the blood, as patients with liver disease
have higher levels of Total Bilirubin in the blood compared to non-diseased individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.scatter(df[df['Selector'] == 1]['DB'], df[df['Selector'] == 1]['Selector'], color='red', label='Liver Disease')
plt.scatter(df[df['Selector'] == 2]['DB'], df[df['Selector'] == 2]['Selector'], color='blue', label='No Liver Disease')
plt.xlabel('Direct Billirubin(DB)')
plt.ylabel('Liver Disease (1=Diseased, 2=Non-Diseased)')
plt.title('Relationship between Direct Billirubin (DB) and Liver Disease Diagnosis')
plt.legend()
plt.grid(True)
plt.ylim(0.9, 2.1)
plt.show()
'''
the chart(Scatter) shows a relationship between DB(Direct Bilirubin) and liver disease diagnosis, as patients with liver disease have higher levels 
of DB ‏(Direct Bilirubin) compared to those without liver disease.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['Alkphos'], df[df['Selector'] == 2]['Alkphos']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Alkphos')
plt.title('Relationship between Alkphos and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) illustrates a direct relationship between Alkphos and liver disease, as patients with liver disease have higher levels of Alkphos 
compared to non-diseased individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['Alkphos'], df[df['Selector'] == 2]['Alkphos']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Alkphos')
plt.title('Relationship between Alkphos and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) illustrates a direct relationship between Alkphos and liver disease, as patients with liver disease have higher levels of Alkphos 
compared to non-diseased individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['Sgpt'], df[df['Selector'] == 2]['Sgpt']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Sgpt')
plt.title('Relationship between Sgpt and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) clearly shows a relationship between liver disease and SGPT(Serum Glutamate Pyruvate Transaminase) as patients with liver disease 
have higher levels of this enzyme compared to non-affected individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
mean_sgot_by_selector = df.groupby('Selector')['Sgot'].mean()
plt.plot(mean_sgot_by_selector.index, mean_sgot_by_selector.values, marker='o', linestyle='-')
plt.xlabel('Liver Disease Diagnosis (1=Diseased, 2=Non-Diseased)')
plt.ylabel('Mean SGOT Level')
plt.title('Relationship between SGOT and Liver Disease Diagnosis')
plt.grid(True)
plt.xticks([1, 2], ['Diseased', 'Non-Diseased'])
plt.show()
'''
The chart(line Graph) clearly shows a relationship between SGOT(Serum Glutamate Oxaloacetic Transaminase) and liver disease, as patients with liver disease have higher levels of SGOT compared 
to non-affected individuals.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['TP'], df[df['Selector'] == 2]['TP']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Total Proteins')
plt.title('Relationship between Total Proteins and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(Boxplot) reveals a relationship between TP(Total Proteins) and liver disease, despite the weak correlation. Non-affected individuals also have TP levels, 
but those affected have slightly higher levels.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['ALB'], df[df['Selector'] == 2]['ALB']], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('Albumin')
plt.title('Relationship between Albumin and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
From the chart(BoxPlot), it is evident that there is a negative correlation between ALB(Albumin) and non-affected individuals with liver disease, 
as an increase in ALB indicates liver health. Individuals with liver disease have lower levels of ALB.
__
'''{python}
plt.figure(figsize=(10, 6))
plt.boxplot([df[df['Selector'] == 1]['A/G Ratio'].dropna(), df[df['Selector'] == 2]['A/G Ratio'].dropna()], labels=['Liver Disease', 'No Liver Disease'])
plt.xlabel('Liver Disease Diagnosis')
plt.ylabel('A/G Ratio')
plt.title('Relationship between A/G Ratio and Liver Disease Diagnosis')
plt.grid(True)
plt.show()
'''
The chart(BoxPlot) reveals variation in the A/G ratio among individuals with liver disease compared to those without. 
However, there is some correlation between an elevated A/G ratio and the presence of liver disease.

________________________
#Data Preprocessing:
# Data cleaning

__

# Remove duplicates

import pandas as pd
df = pd.read_csv('Indian Liver Patient Dataset (ILPD).csv')
num_duplicates = df.duplicated().sum()
df_cleaned = df.drop_duplicates()
print("Number of duplicate rows:", num_duplicates)
print("DataFrame after dropping all duplicate rows:")
print(df_cleaned)
df_cleaned.to_csv('cleaned Indian Liver Patient Dataset (ILPD).csv', index=False)

__

# hundling missing values\
'''{python}

import pandas as pd
mean_value = df['A/G Ratio'].mean()
df['A/G Ratio'].fillna(value=mean_value, inplace=True)


# Because all the 4 missing values in our data are in just one column which is the A/G Ratio, so we calculated the mean for this column and then replaced the missing values with this mean


   __

# Romving outliers \

'''{python}
import pandas as pd
import numpy as np
df = pd.read_csv('Indian Liver Patient Dataset (ILPD).csv')
numeric_cols = df.select_dtypes(include=[np.number]).columns
non_numeric_cols = df.select_dtypes(exclude=[np.number]).columns
numeric_cols = numeric_cols.difference(non_numeric_cols)
Q1 = df[numeric_cols].quantile(0.25)
Q3 = df[numeric_cols].quantile(0.75)
IQR = Q3 - Q1
threshold = 1.5
outliers = df[((df[numeric_cols] < (Q1 - threshold * IQR)) | (df[numeric_cols] > (Q3 + threshold * IQR))).any(axis=1)]
df = df[~((df[numeric_cols] < (Q1 - threshold * IQR)) | (df[numeric_cols] > (Q3 + threshold * IQR))).any(axis=1)]
while not outliers.empty:
    Q1 = df[numeric_cols].quantile(0.25)
    Q3 = df[numeric_cols].quantile(0.75)
    IQR = Q3 - Q1
    outliers = df[((df[numeric_cols] < (Q1 - threshold * IQR)) | (df[numeric_cols] > (Q3 + threshold * IQR))).any(axis=1)]
    df = df[~((df[numeric_cols] < (Q1 - threshold * IQR)) | (df[numeric_cols] > (Q3 + threshold * IQR))).any(axis=1)]
if outliers.empty:
    print("No outliers found after removal.")
else:
    print("Outliers found after removal:")
    print(outliers)
df.to_csv('Indian Liver Patient Dataset (ILPD).csv', index=False)


# as we know removing outliers focuses on numerical values and
because of that I excluded the nonnumerical values and then removed the outliers 
and as an optional step I checked if there were any left outliers in our data or not.

# Data Transmation 
 __

# encoding\
'''{python}

import pandas as pd
df = pd.read_csv("Indian Liver Patient Dataset (ILPD).csv")
df["Gender"] = df["Gender"].map({"Male": 0, "Female": 1})
# Print the updated dataset
print(df)
df.to_csv('Indian Liver Patient Dataset (ILPD).csv', index=False)

#Here in the encoding  method, we represent the gender with values 0 and 1, which mean as follows (male =0) and (female = 1)

 __
# Normaliztion \
'''{python}
import pandas as pd
df = pd.read_csv("Indian Liver Patient Dataset (ILPD).csv")
for column in df.columns:
    if column not in ['Age', 'Selector']:
        if df[column].dtype == 'int64':
            df[column] = df[column].astype(float) / 10

# Print the normalized dataset
print(df)
df.to_csv('Indian Liver Patient Dataset (ILPD).csv', index=False)

#Here in Normaliztion method, we normalize the attributes and unify their scale since the range for each attribute is quite different ,
This method helps us to format all the values in dataset and facilitates the analysis process. 

__
#discretization \
'''{python}
import pandas as pd

# Load the dataset
df = pd.read_csv("Indian Liver Patient Dataset (ILPD).csv")

# Discretize the "Age" column into ranked age groups
df["Age"] = pd.cut(df["Age"], bins=[0, 17, 64, df["Age"].max()], labels=[" Children", "Adults", "Seniors "], right=False)

# Print the updated dataset
print(df)
df.to_csv('Indian Liver Patient Dataset (ILPD).csv', index=False)

#Here in discretization method, we convert numbers to Ranking of age groups To facilitate reading for the all. 

 __
# Aggregation  \
'''{python}
import pandas as pd

# Read CSV file
df = pd.read_csv('Indian Liver Patient Dataset (ILPD).csv')
df = df.drop('Age', axis=1)
df.groupby('Gender').agg('max')
df.groupby(['Gender', 'Selector']).agg('mean')

#here in Aggregation method, we grouped the "Gender" and "Selector" columns and an aggregation function (in this case, "mean")
And it was applied in the data. This will give us the mean value for each attribute for both male and female patients who are either selected (1) or not selected (2).
we ignored age attribute Because it has nothing to do with contracting the disease.
















